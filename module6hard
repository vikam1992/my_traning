from math import pi, sqrt


class Figure:
    sides_count = 0

    def __init__(self, color, sides): # магические методы являются публичными
        self.__sides = list(sides) # скрытые доступны внутри класса
        self.__color = list(color)  # приватные доступны внутри файла
        self.filled = None


    def get_color(self):
        return self.__color

    def __is_valid_color(self, r, g, b):
        if not isinstance(r, int) and isinstance(g, int) and isinstance(b, int):
            return False
        if not (0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255):
            return False
        else:
            return True

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):
            self.__color = [r, g, b]

    def get_sides(self):
        return self.__sides


    def __is_valid_sides(self, sides):
        if len(sides) != self.sides_count:
            return False
        for side in sides:
            if not (isinstance(side, int) and side > 0):
                return False
            else:
                return True


    def __len__(self):
        return sum(self.__sides)

    def set_sides(self, *new_sides):
        if self.__is_valid_sides(new_sides):
            self.__sides = list(new_sides)


class Circle(Figure):
    sides_count = 1
    def __init__(self, color, *sides):
        if len(sides) != self.sides_count:
            sides = [1]
        super().__init__(color, sides)
        self.radius = len(self) / (2 * pi)

    def set_sides(self, new_sides):
        super().set_sides(new_sides)
        self.__radius = len(self) / (2 * pi)

    def get_square(self):
        return pi * self.__radius ** 2  # площадь круга


class Triangle(Figure):
    sides_count = 3

    def __init__(self, color, *sides):
        if len(sides) != self.sides_count:
            sides = [1, 1, 1]
        super().__init__(color, sides)


    def get_square(self):
        p = len(self)/2
        a, b, c = self.get_sides()
        S = sqrt(p*(p-a)*(p-b)*(p-c))
        return S


class Cube(Figure):
    sides_count = 12
    def __init__(self, color, *sides):
        if len(sides) != 1:
            sides = [1]
        super().__init__(color, sides * self.sides_count)

    def get_volume(self):
        return super().get_sides()[0] ** 3


circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())
